- name: Add Temporal chart repo
  kubernetes.core.helm_repository:
    name: temporal
    repo_url: "https://go.temporal.io/helm-charts/"

- name: Create namespace
  kubernetes.core.k8s:
    state: present
    namespace: "{{ temporal_namespace }}"
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ temporal_namespace }}"
        labels:
          access.manetu.io/temporal: "true"                     # grants access to itself
          access.manetu.io/cassandra: "true"                    # grants access to the cassandra cluster

- name: Install Network Policy
  when: notyet is defined
  kubernetes.core.k8s:
    state: present
    namespace: "{{ temporal_namespace }}"
    definition:
      apiVersion: networking.k8s.io/v1
      kind: NetworkPolicy
      metadata:
        name: temporal-network-policy
      spec:
        podSelector: {}
        policyTypes:
          - Ingress
        ingress:
          - from:
              - namespaceSelector:
                  matchLabels:
                    access.manetu.io/temporal: "true"

- name: Create CA certificate
  kubernetes.core.k8s:
    state: present
    namespace: "{{ temporal_namespace }}"
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: temporal-ca-cert
      spec:
        isCA: true
        duration: "{{ temporal_tls_duration }}"
        commonName: temporal-ca-cert
        secretName: temporal-ca-secret
        usage:
          - "cert sign"
        issuerRef:
          name: selfsigned-issuer
          kind: ClusterIssuer

- name: Create CA issuer
  kubernetes.core.k8s:
    state: present
    namespace: "{{ temporal_namespace }}"
    definition:
      apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        name: temporal-ca-issuer
      spec:
        ca:
          secretName: temporal-ca-secret

- name: Create ElasticSearch credentials
  kubernetes.core.k8s:
    namespace: "{{ temporal_namespace }}"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: temporal-elasticsearch-credentials
      type: kubernetes.io/basic-auth
      stringData:
        username: elastic
        password: "{{ temporal_elasticsearch_password }}"
        roles: superuser

- name: Create ElasticSearch TLS certificate
  kubernetes.core.k8s:
    state: present
    namespace: "{{ temporal_namespace }}"
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: temporal-elasticsearch-certificate
      spec:
        isCA: false
        duration: "{{ temporal_tls_duration }}"
        commonName: temporal-elasticsearch
        dnsNames:
          - "temporal-elasticsearch-es-http"
          - "temporal-elasticsearch-es-http.{{ temporal_namespace }}.es.local"
          - "temporal-elasticsearch-es-http.{{ temporal_namespace }}.svc"
          - "temporal-elasticsearch-es-http.{{ temporal_namespace }}"
          - "temporal-elasticsearch-es-internal-http.{{ temporal_namespace }}.svc"
          - "temporal-elasticsearch-es-internal-http.{{ temporal_namespace }}"
          - "*.temporal-elasticsearch-es-default.{{ temporal_namespace }}.svc"
        secretName: temporal-elasticsearch-certificate
        usage:
          - "server auth"
        issuerRef:
          name: temporal-ca-issuer
          kind: Issuer

- name: Deploy ElasticSearch based visibility store
  kubernetes.core.k8s:
    namespace: "{{ temporal_namespace }}"
    state: present
    wait: yes
    wait_timeout: "{{ temporal_elasticsearch_wait_timeout }}"
    definition: "{{ lookup('template', 'elasticsearch.yml') | from_yaml }}"

- name: Get Cassandra certificate
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ cassandra_namespace }}"
    name: cassandra-client-certificate
    wait: true
  register: client_cert

- set_fact:
    cassandra_ca_crt: "{{ client_cert.resources[0].data['ca.crt'] | b64decode }}"

- name: Create Cassandra credentials
  kubernetes.core.k8s:
    state: present
    namespace: "{{ temporal_namespace }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: temporal-cassandra-secret
      type: Opaque
      data:
        password: "{{ cassandra_password | b64encode }}"
        ca.crt: "{{ cassandra_ca_crt | b64encode }}"

- name: Create Internode TLS certificate
  kubernetes.core.k8s:
    state: present
    namespace: "{{ temporal_namespace }}"
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: temporal-internode-certificate
      spec:
        isCA: false
        duration: "{{ temporal_tls_duration }}"
        commonName: temporal-internode
        dnsNames:
          - "*.{{ temporal_namespace }}.svc.cluster.local"
          - "*.{{ temporal_namespace }}"
        secretName: temporal-internode-certificate
        usage:
          - "server auth"
          - "client auth"
        issuerRef:
          name: temporal-ca-issuer
          kind: Issuer

- name: Create Frontend TLS certificate
  when: temporal_tls_enabled
  kubernetes.core.k8s:
    state: present
    namespace: "{{ temporal_namespace }}"
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: temporal-frontend-certificate
      spec:
        isCA: false
        duration: "{{ temporal_tls_duration }}"
        commonName: temporal-frontend
        dnsNames:
          - "temporal-frontend"
          - "temporal-frontend.{{ temporal_namespace }}"
          - "temporal-frontend.{{ temporal_namespace }}.svc.cluster.local"
        secretName: temporal-frontend-certificate
        usage:
          - "server auth"
        issuerRef:
          name: temporal-ca-issuer
          kind: Issuer

- name: Initialize Schema
  kubernetes.core.k8s:
    state: present
    namespace: "{{ temporal_namespace }}"
    definition: "{{ lookup('template', 'schema-init.yml') | from_yaml }}"
    wait: yes
    wait_timeout: 120
    wait_condition:
      type: Complete
      status: True

- name: Create temporary directory for Temporal Chart
  ansible.builtin.tempfile:
    state: directory
    suffix: temporal-chart
  register: tmpdir

- name: Upload Temporal chart
  copy:
    src: chart/
    dest: "{{ tmpdir.path }}"

- name: Install Temporal
  kubernetes.core.helm:
    namespace: "{{ temporal_namespace }}"
    name: temporal
    chart_ref: "{{ tmpdir.path }}"
    dependency_update: true
    wait: true
    values: "{{ lookup('template', 'chart-values.yml') | from_yaml }}"

- name: Get frontend CA certificate
  when: temporal_tls_enabled
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ temporal_namespace }}"
    name: temporal-frontend-certificate
    wait: true
  register: client_cert

- name: Create Temporal configuration for Manetu
  kubernetes.core.k8s:
    state: present
    namespace: "{{ manetu_namespace }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: temporal-config
      data:
        TEMPORAL_HOSTPORT: "temporal-frontend.{{ temporal_namespace }}:7233"
        TEMPORAL_TLS_ENABLED: "{{ temporal_tls_enabled | string | lower | quote }}"
        TEMPORAL_TLS_MUTUAL: "false"

- name: Create Temporal secrets for Manetu
  when: temporal_tls_enabled
  kubernetes.core.k8s:
    state: present
    namespace: "{{ manetu_namespace }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: temporal-secrets
      type: Opaque
      data:
        ca.crt: "{{ client_cert.resources[0].data['ca.crt']  }}"
